<?php
declare(strict_types=1);

namespace Miklcct\ThinPhpApp\Test\Controller;

use PHPUnit\Framework\MockObject\MockObject;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

trait MiddlewaresTrait {
    /**
     * Get a set of middlewares which expect to chain.
     *
     * The first middleware expects to operate on the original request.
     * The second middleware expects to operate on the request generated by the first.
     * The third middleware expects to operate on the request generated by the second, etc.
     *
     * The final request in the result will be the request generated by the last middleware, which the request handler
     * should expect.
     *
     * The response is directly passed back from the request handler via the middlewares.
     *
     * @param RequestInterface $original_request
     * @param int $count
     * @return MiddlewareSet
     */
    protected function createMiddlewares(RequestInterface $original_request, int $count) : MiddlewareSet {
        $middleware_requests = array_map(
            function () : ServerRequestInterface {
                return $this->createMock(ServerRequestInterface::class);
            }
            , range(0, $count - 1)
        );
        $middlewares = array_map(
            function (int $position) use ($original_request, $middleware_requests) : MiddlewareInterface {
                /** @var MockObject|MiddlewareInterface $middleware */
                $middleware = $this->createMock(MiddlewareInterface::class);
                $middleware
                    ->expects(self::once())
                    ->method('process')
                    ->with(
                        self::identicalTo($position ? $middleware_requests[$position - 1] : $original_request)
                        , self::anything()
                    )
                    ->willReturnCallback(
                        function (
                            ServerRequestInterface $request
                            , RequestHandlerInterface $request_handler
                        ) use ($middleware_requests, $position) : ResponseInterface {
                            return $request_handler->handle($middleware_requests[$position]);
                        }
                    );
                return $middleware;
            }
            , range(0, $count - 1)
        );
        $result = new MiddlewareSet();
        $result->middlewares = $middlewares;
        $result->finalRequest = $middleware_requests[$count - 1];
        return $result;
    }
}